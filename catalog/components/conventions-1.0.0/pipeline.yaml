---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: conventions
  annotations:
    kapp.k14s.io/change-group: "pipelines"
spec:
  description: Builds an image from the tar source using kpack
  params:
  - name: workload-name
    type: string
  - name: image-url
    type: string
  - name: env
    type: string
  tasks:
    - name: prepare
      params:
        - name: workload-name
          value: $(params.workload-name)
        - name: image-url
          value: $(params.image-url)
        - name: env
          value: $(params.env)
      taskSpec:
        params:
          - name: image-url
            type: string
          - name: workload-name
            type: string
          - name: env
            type: string
        results:
          - name: resource
            type: string
            description: the resource to create in the next step
        steps:
          - name: prepare-resource
            image: us-east4-docker.pkg.dev/adhol-playground/image-base/scripting-base
            script: |
              set -euo pipefail

              cat << EOF > values.yaml
              #@data/values

              ---
              EOF

              echo 'env:' >> values.yaml
              echo '$(params.env)' | yq -P -o yaml >> values.yaml

              echo "[DEBUG] values.yaml"
              cat values.yaml

              cat << EOF > template.yaml
              #@ load("@ytt:data", "data")
              ---
              serviceAccountName: default
              template:
                metadata:
                  annotations:
                    developer.conventions/target-containers: workload
                  labels:
                    app.kubernetes.io/component: run
                    app.kubernetes.io/part-of: $(params.workload-name)
                    carto.run/workload-name: $(params.workload-name)
                spec:
                  containers:
                    - image: $(params.image-url)
                      name: workload
                      resources: {}
                      securityContext:
                        runAsUser: 1000
                      env: #@ data.values.env
                  serviceAccountName: default
              EOF

              echo "[DEBUG] template.yaml"
              cat template.yaml

              ytt -f template.yaml -f values.yaml > podintent.yaml
              echo "[DEBUG] podintent.yaml"
              cat podintent.yaml

              rm template.yaml
              rm values.yaml

              cat podintent.yaml | yq -oj | jq -c > $(results.resource.path)

    - name: conventions
      runAfter:
        - prepare
      params:
        - name: image-url
          value: $(params.image-url)
        - name: workload-name
          value: $(params.workload-name)
        - name: resource
          value: $(tasks.prepare.results.resource)
      taskSpec:
        apiVersion: managed-resource-controller.apps.tanzu.vmware.com/v1alpha1
        kind: ManagedResource
        spec:
          resourceSpec:
            apiVersion: conventions.carto.run/v1alpha1
            kind: PodIntent
            metadata:
              generateName: $(params.workload-name)-
            spec: $(params.resource)
          resultMappings:
            - name: template
              path: status.template
          healthRule:
            singleConditionType: ConventionsApplied
        params:
          - name: image-url
            type: string
          - name: workload-name
            type: string
          - name: resource
            type: string

  results:
    - name: conventions
      description: Conventions template output
      type: string
      value: $(tasks.conventions.results.template)
